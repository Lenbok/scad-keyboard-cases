
// Functions to extract from the raw data structure, not sized to units
function key_pos(key) = key[0];
function key_size(key) = key[1];
function key_rot(key) = key[2];
function key_rot_angle(key) = key_rot(key)[0];
function key_rot_off(key) = key_rot(key)[1];

// Put a child shape at the appropriate position for a key, incorporating unit sizing
module position_key(key, unit = 19.05) {
    pos = (key_pos(key) + key_size(key) / 2) * unit;
    rot_off = key_rot_off(key) * unit;
    translate(rot_off) rotate([0, 0, key_rot_angle(key)]) translate(-rot_off)
        translate(pos)
        children();
}

macbook_pro_2015 = [
    [[0, 1], [14.5, 0.5], [0, [0, 0]]], /* Esc */
    [[0, 1.5], [1, 1], [0, [0, 0]]], /* ~ / ` */
    [[1, 1.5], [1, 1], [0, [0, 0]]], /* ! / 1 */
    [[2, 1.5], [1, 1], [0, [0, 0]]], /* @ / 2 */
    [[3, 1.5], [1, 1], [0, [0, 0]]], /* # / 3 */
    [[4, 1.5], [1, 1], [0, [0, 0]]], /* $ / 4 */
    [[5, 1.5], [1, 1], [0, [0, 0]]], /* % / 5 */
    [[6, 1.5], [1, 1], [0, [0, 0]]], /* ^ / 6 */
    [[7, 1.5], [1, 1], [0, [0, 0]]], /* & / 7 */
    [[8, 1.5], [1, 1], [0, [0, 0]]], /* * / 8 */
    [[9, 1.5], [1, 1], [0, [0, 0]]], /* ( / 9 */
    [[10, 1.5], [1, 1], [0, [0, 0]]], /* ) / 0 */
    [[11, 1.5], [1, 1], [0, [0, 0]]], /* _ / - */
    [[12, 1.5], [1, 1], [0, [0, 0]]], /* + / = */
    [[13, 1.5], [1.5, 1], [0, [0, 0]]], /* Backspace */
    [[0, 2.5], [1.5, 1], [0, [0, 0]]], /* Tab */
    [[1.5, 2.5], [1, 1], [0, [0, 0]]], /* Q */
    [[2.5, 2.5], [1, 1], [0, [0, 0]]], /* W */
    [[3.5, 2.5], [1, 1], [0, [0, 0]]], /* E */
    [[4.5, 2.5], [1, 1], [0, [0, 0]]], /* R */
    [[5.5, 2.5], [1, 1], [0, [0, 0]]], /* T */
    [[6.5, 2.5], [1, 1], [0, [0, 0]]], /* Y */
    [[7.5, 2.5], [1, 1], [0, [0, 0]]], /* U */
    [[8.5, 2.5], [1, 1], [0, [0, 0]]], /* I */
    [[9.5, 2.5], [1, 1], [0, [0, 0]]], /* O */
    [[10.5, 2.5], [1, 1], [0, [0, 0]]], /* P */
    [[11.5, 2.5], [1, 1], [0, [0, 0]]], /* { / [ */
    [[12.5, 2.5], [1, 1], [0, [0, 0]]], /* } / ] */
    [[13.5, 2.5], [1, 1], [0, [0, 0]]], /* | / \ */
    [[0, 3.5], [1.75, 1], [0, [0, 0]]], /* Caps / Lock */
    [[1.75, 3.5], [1, 1], [0, [0, 0]]], /* A */
    [[2.75, 3.5], [1, 1], [0, [0, 0]]], /* S */
    [[3.75, 3.5], [1, 1], [0, [0, 0]]], /* D */
    [[4.75, 3.5], [1, 1], [0, [0, 0]]], /* F */
    [[5.75, 3.5], [1, 1], [0, [0, 0]]], /* G */
    [[6.75, 3.5], [1, 1], [0, [0, 0]]], /* H */
    [[7.75, 3.5], [1, 1], [0, [0, 0]]], /* J */
    [[8.75, 3.5], [1, 1], [0, [0, 0]]], /* K */
    [[9.75, 3.5], [1, 1], [0, [0, 0]]], /* L */
    [[10.75, 3.5], [1, 1], [0, [0, 0]]], /* : / ; */
    [[11.75, 3.5], [1, 1], [0, [0, 0]]], /* " / ' */
    [[12.75, 3.5], [1.75, 1], [0, [0, 0]]], /* Enter */
    [[0, 4.5], [2.25, 1], [0, [0, 0]]], /* Shift */
    [[2.25, 4.5], [1, 1], [0, [0, 0]]], /* Z */
    [[3.25, 4.5], [1, 1], [0, [0, 0]]], /* X */
    [[4.25, 4.5], [1, 1], [0, [0, 0]]], /* C */
    [[5.25, 4.5], [1, 1], [0, [0, 0]]], /* V */
    [[6.25, 4.5], [1, 1], [0, [0, 0]]], /* B */
    [[7.25, 4.5], [1, 1], [0, [0, 0]]], /* N */
    [[8.25, 4.5], [1, 1], [0, [0, 0]]], /* M */
    [[9.25, 4.5], [1, 1], [0, [0, 0]]], /* < / , */
    [[10.25, 4.5], [1, 1], [0, [0, 0]]], /* > / . */
    [[11.25, 4.5], [1, 1], [0, [0, 0]]], /* ? / / */
    [[12.25, 4.5], [2.25, 1], [0, [0, 0]]], /* Shift */
    [[0, 5.5], [1, 1.25], [0, [0, 0]]], /* Ctrl */
    [[1, 5.5], [1, 1.25], [0, [0, 0]]], /* Fn */
    [[2, 5.5], [1, 1.25], [0, [0, 0]]], /* Win */
    [[3, 5.5], [1.25, 1.25], [0, [0, 0]]], /* Alt */
    [[4.25, 5.5], [5, 1.25], [0, [0, 0]]], /*  */
    [[9.25, 5.5], [1.25, 1.25], [0, [0, 0]]], /* Alt */
    [[10.5, 5.5], [1, 1.25], [0, [0, 0]]], /* Ctrl */
    [[11.5, 5.5], [1, 1.25], [0, [0, 0]]], /* < */
    [[12.5, 5.5], [1, 1.25], [0, [0, 0]]], /* ^ */
    [[13.5, 5.5], [1, 1.25], [0, [0, 0]]], /* > */
];
